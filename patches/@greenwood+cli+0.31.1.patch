diff --git a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
index 58c3d18..891018b 100644
--- a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
+++ b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
@@ -9,7 +9,7 @@ const diagnostics = new Map();
 
 function updateImportMap(key, value, resolvedRoot) {
   importMap.set(
-    key.replace("./", ""),
+    key.replace("./", "").replace(/\/\//g, '/'),
     `${IMPORT_MAP_RESOLVED_PREFIX}${resolvedRoot.replace("file://", "")}${value.replace("./", "")}`,
   );
 }
@@ -83,7 +83,7 @@ function globToRegex(pattern) {
   pattern = pattern.replace(/[.+^${}()|[\]\\]/g, "\\$&");
 
   // Replace glob `*` with regex `[^/]*` (any characters except slashes)
-  pattern = pattern.replace(/\*/g, "[^/]*");
+  pattern = pattern.replace(/\*/g, "[^]*");
 
   // Replace glob `**` with regex `(.*)` (zero or more directories or files)
   // pattern = pattern.replace(/\*\*/g, '(.*)');
@@ -200,7 +200,42 @@ async function walkPackageForExports(dependency, packageJson, resolvedRoot) {
        * 2. module-sync
        * 3. default
        */
-      if (typeof exports[sub] === "object") {
+      if(Array.isArray(exports[sub])) {
+        // console.log('?????????');
+        for (const item of exports[sub]) {
+          // console.log({ item })
+          // TODO if string, just check it in...
+          if(typeof item === 'object') {
+            // console.log('this is a new one....')
+            let matched = false;
+
+            for (const condition of SUPPORTED_EXPORT_CONDITIONS) {
+              if (item[condition]) {
+                matched = true;
+                // console.log('item[condirtion]', item[condition])
+                // console.log({ dependency, exports, sub, condition, resolvedRoot });
+                if (sub.indexOf("*") >= 0) {
+                  // TODO
+                  // await walkExportPatterns(dependency, sub, item[condition], resolvedRoot);
+                } else {
+                  // TODO 
+                  // const suffix = sub === "." ? "" : sub
+                  updateImportMap(dependency, item[condition], resolvedRoot);
+                }
+                break;
+              }
+            }
+  
+            if (!matched) {
+              // ex. https://unpkg.com/browse/matches-selector@1.2.0/package.json
+              diagnostics.set(
+                dependency,
+                `no supported export conditions (\`${SUPPORTED_EXPORT_CONDITIONS.join(", ")}\`) for dependency => \`${dependency}\``,
+              );
+            }
+          }
+        }
+      } else if (typeof exports[sub] === "object") {
         let matched = false;
 
         for (const condition of SUPPORTED_EXPORT_CONDITIONS) {
@@ -239,7 +274,18 @@ async function walkPackageForExports(dependency, packageJson, resolvedRoot) {
       }
     }
   } else if (module || main) {
-    updateImportMap(dependency, `${module ?? main}`, resolvedRoot);
+    if (main) {
+      const root = main.split('/').slice(0, -1).join('/');
+      // console.log({ main, root });
+      // const relativeRoot = root.startsWith('.')
+      //   ? root
+      //   : `./${root}`;
+      // console.log({ relativeRoot, resolvedRoot });
+      updateImportMap(dependency, main, resolvedRoot);
+      await walkExportPatterns(dependency, '', `${root}/*`, resolvedRoot);
+    } else {
+      updateImportMap(dependency, module, resolvedRoot);
+    }
   } else if (fs.existsSync(new URL("./index.js", resolvedRoot))) {
     // if an index.js file exists but with no main entry point, then it should count as a main entry point
     // https://docs.npmjs.com/cli/v7/configuring-npm/package-json#main
@@ -271,7 +317,7 @@ async function walkPackageJson(packageJson = {}, walkedPackages = new Set()) {
           ).default;
           const { name } = resolvedPackageJson;
 
-          walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
+          await walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
 
           if (!walkedPackages.has(name)) {
             walkedPackages.add(name);
